/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Rese
 * Rese API
 * OpenAPI spec version: 0.0.1
 */
import { faker } from "@faker-js/faker";
import * as axios from "axios";
import { HttpResponse, delay, http } from "msw";

import type {
  CreatedResponse,
  GetSanctumCsrfCookie204Response,
  GetShopsParams,
  NoContentResponse,
  OkResponse,
  PostAuthLoginBody,
  PostAuthRegisterBody
} from "../models";
import type {
  GetAreas200Response,
  GetAuthStatus200Response,
  GetGenres200Response,
  GetShops200Response,
  ShowCustomer200Response
} from "../models";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * エリア一覧を取得する
 * @summary エリア一覧取得
 */
export const getAreas = <TData = AxiosResponse<GetAreas200Response>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/areas`, options);
};

/**
 * 認証状態を取得する
 * @summary 認証状態取得
 */
export const getAuthStatus = <TData = AxiosResponse<GetAuthStatus200Response>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/auth/status`, options);
};

/**
 * ユーザー(一般会員)の情報を取得する
 * @summary 会員情報取得
 */
export const getCustomer = <TData = AxiosResponse<ShowCustomer200Response>>(
  user: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/customers/${user}`, options);
};

/**
 * ユーザー(一般会員)が飲食店をお気に入り登録する
 * @summary お気に入り登録
 */
export const postCustomerShopFavorite = <
  TData = AxiosResponse<CreatedResponse>
>(
  user: number,
  shop: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.post(
    `/customers/${user}/shops/${shop}/favorite`,
    undefined,
    options
  );
};

/**
 * ジャンル一覧を取得する
 * @summary ジャンル一覧取得
 */
export const getGenres = <TData = AxiosResponse<GetGenres200Response>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/genres`, options);
};

/**
 * 飲食店一覧を取得する
 * @summary 飲食店一覧取得
 */
export const getShops = <TData = AxiosResponse<GetShops200Response>>(
  params?: GetShopsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/shops`, {
    ...options,
    params: { ...params, ...options?.params }
  });
};

/**
 * CSRFトークンを取得する
 * @summary CSRFトークン取得
 */
export const getSanctumCsrfCookie = <
  TData = AxiosResponse<GetSanctumCsrfCookie204Response>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/sanctum/csrf-cookie`, options);
};

/**
 * ユーザー(一般会員)を新規登録する
 * @summary 会員登録
 */
export const postAuthRegister = <
  TData = AxiosResponse<CreatedResponse | NoContentResponse>
>(
  postAuthRegisterBody: PostAuthRegisterBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.post(`/auth/register`, postAuthRegisterBody, options);
};

/**
 * ユーザー(一般会員)のログイン処理を行う
 * @summary ログイン
 */
export const postAuthLogin = <
  TData = AxiosResponse<OkResponse | NoContentResponse>
>(
  postAuthLoginBody: PostAuthLoginBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.post(`/auth/login`, postAuthLoginBody, options);
};

/**
 * ユーザー(一般会員)のログアウト処理を行う
 * @summary ログアウト
 */
export const postAuthLogout = <TData = AxiosResponse<NoContentResponse>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.post(`/auth/logout`, undefined, options);
};

export type GetAreasResult = AxiosResponse<GetAreas200Response>;
export type GetAuthStatusResult = AxiosResponse<GetAuthStatus200Response>;
export type GetCustomerResult = AxiosResponse<ShowCustomer200Response>;
export type PostCustomerShopFavoriteResult = AxiosResponse<CreatedResponse>;
export type GetGenresResult = AxiosResponse<GetGenres200Response>;
export type GetShopsResult = AxiosResponse<GetShops200Response>;
export type GetSanctumCsrfCookieResult =
  AxiosResponse<GetSanctumCsrfCookie204Response>;
export type PostAuthRegisterResult = AxiosResponse<
  CreatedResponse | NoContentResponse
>;
export type PostAuthLoginResult = AxiosResponse<OkResponse | NoContentResponse>;
export type PostAuthLogoutResult = AxiosResponse<NoContentResponse>;

export const getGetAreasResponseMock = (
  overrideResponse: any = {}
): GetAreas200Response => ({
  areas: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
    ...overrideResponse
  })),
  ...overrideResponse
});

export const getGetAuthStatusResponseMock = (
  overrideResponse: any = {}
): GetAuthStatus200Response => ({
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined
  ]),
  status: faker.helpers.arrayElement(["guest", "customer"] as const),
  ...overrideResponse
});

export const getGetCustomerResponseMock = (
  overrideResponse: any = {}
): ShowCustomer200Response => ({
  name: faker.word.sample(),
  ...overrideResponse
});

export const getGetGenresResponseMock = (
  overrideResponse: any = {}
): GetGenres200Response => ({
  genres: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
    ...overrideResponse
  })),
  ...overrideResponse
});

export const getGetShopsResponseMock = (
  overrideResponse: any = {}
): GetShops200Response => ({
  links: {
    first: faker.internet.url(),
    last: faker.internet.url(),
    next: faker.helpers.arrayElement([{}, faker.internet.url()]),
    prev: faker.helpers.arrayElement([{}, faker.internet.url()]),
    ...overrideResponse
  },
  meta: {
    current_page: faker.number.int({ min: 1, max: undefined }),
    from: faker.helpers.arrayElement([
      {},
      faker.number.int({ min: 1, max: undefined })
    ]),
    last_page: faker.number.int({ min: 1, max: undefined }),
    links: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      active: faker.datatype.boolean(),
      label: faker.word.sample(),
      url: faker.helpers.arrayElement([{}, faker.internet.url()]),
      ...overrideResponse
    })),
    path: faker.internet.url(),
    per_page: faker.number.int({ min: 1, max: undefined }),
    to: faker.helpers.arrayElement([
      {},
      faker.number.int({ min: 1, max: undefined })
    ]),
    total: faker.number.int({ min: 0, max: undefined }),
    ...overrideResponse
  },
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    area: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.word.sample(),
      ...overrideResponse
    },
    favorite_status: faker.helpers.arrayElement([
      "unknown",
      "marked",
      "unmarked"
    ] as const),
    genre: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.word.sample(),
      ...overrideResponse
    },
    id: faker.number.int({ min: undefined, max: undefined }),
    image_url: faker.internet.url(),
    name: faker.word.sample(),
    ...overrideResponse
  })),
  ...overrideResponse
});

export const getGetAreasMockHandler = (
  overrideResponse?: GetAreas200Response
) => {
  return http.get("*/areas", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAreasResponseMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json"
        }
      }
    );
  });
};

export const getGetAuthStatusMockHandler = (
  overrideResponse?: GetAuthStatus200Response
) => {
  return http.get("*/auth/status", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAuthStatusResponseMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json"
        }
      }
    );
  });
};

export const getGetCustomerMockHandler = (
  overrideResponse?: ShowCustomer200Response
) => {
  return http.get("*/customers/:user", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetCustomerResponseMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json"
        }
      }
    );
  });
};

export const getPostCustomerShopFavoriteMockHandler = () => {
  return http.post("*/customers/:user/shops/:shop/favorite", async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json"
      }
    });
  });
};

export const getGetGenresMockHandler = (
  overrideResponse?: GetGenres200Response
) => {
  return http.get("*/genres", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetGenresResponseMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json"
        }
      }
    );
  });
};

export const getGetShopsMockHandler = (
  overrideResponse?: GetShops200Response
) => {
  return http.get("*/shops", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetShopsResponseMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json"
        }
      }
    );
  });
};

export const getGetSanctumCsrfCookieMockHandler = () => {
  return http.get("*/sanctum/csrf-cookie", async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json"
      }
    });
  });
};

export const getPostAuthRegisterMockHandler = () => {
  return http.post("*/auth/register", async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json"
      }
    });
  });
};

export const getPostAuthLoginMockHandler = () => {
  return http.post("*/auth/login", async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json"
      }
    });
  });
};

export const getPostAuthLogoutMockHandler = () => {
  return http.post("*/auth/logout", async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json"
      }
    });
  });
};
export const getReseMock = () => [
  getGetAreasMockHandler(),
  getGetAuthStatusMockHandler(),
  getGetCustomerMockHandler(),
  getPostCustomerShopFavoriteMockHandler(),
  getGetGenresMockHandler(),
  getGetShopsMockHandler(),
  getGetSanctumCsrfCookieMockHandler(),
  getPostAuthRegisterMockHandler(),
  getPostAuthLoginMockHandler(),
  getPostAuthLogoutMockHandler()
];
