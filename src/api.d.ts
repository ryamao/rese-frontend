/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/customers/{user}": {
    /**
     * 会員情報取得
     * @description ユーザー(一般会員)の情報を取得する
     */
    get: operations["get-customer"];
  };
  "/sanctum/csrf-cookie": {
    /**
     * CSRFトークン取得
     * @description CSRFトークンを取得する
     */
    get: operations["get-sanctum-csrf-cookie"];
  };
  "/auth/register": {
    /**
     * 会員登録
     * @description ユーザー(一般会員)を新規登録する
     */
    post: operations["post-auth-register"];
  };
  "/auth/login": {
    /**
     * ログイン
     * @description ユーザー(一般会員)のログイン処理を行う
     */
    post: operations["post-auth-login"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: {
    /** @description OK */
    "show-customer-200": {
      content: {
        "application/json": {
          /** @example テストユーザー */
          name: string;
        };
      };
    };
    /** @description リクエストが成功しリソースが見つかった */
    ok: {
      content: never;
    };
    /** @description リクエストが成功しリソースが作成された */
    created: {
      content: never;
    };
    /** @description リクエストが成功しリソースが存在しない */
    "no-content": {
      content: never;
    };
    /** @description リクエストが成功しリソースが見つかった */
    found: {
      content: never;
    };
    /** @description 認証エラー */
    unauthorized: {
      content: never;
    };
    /** @description 認可エラー */
    forbidden: {
      content: never;
    };
    /** @description 指定されたリソースが存在しない */
    "not-found": {
      content: never;
    };
    /** @description リクエストが競合している */
    conflict: {
      content: never;
    };
    /** @description リクエストが正しくない */
    "unprocessable-entity": {
      content: never;
    };
    /** @description CSRFトークン取得成功 */
    "get-sanctum-csrf-cookie-204": {
      headers: {
        /** @description CSRFトークンをCookieにセット */
        "Set-Cookie": string;
      };
      content: never;
    };
    /** @description バリデーションエラーまたはメールアドレスが登録済み */
    "post-auth-register-422": {
      content: {
        "application/json": {
          message: string;
          errors: {
            name?: string[];
            email?: string[];
            password?: string[];
          };
        };
      };
    };
    /** @description バリデーションエラーまたは未登録 */
    "post-auth-login-422": {
      content: {
        "application/json": {
          message: string;
          errors: {
            email?: string[];
            password?: string[];
          };
        };
      };
    };
  };
  parameters: {
    /** @description ユーザーID */
    "user-id": number;
  };
  requestBodies: {
    /** @description ユーザー登録リクエスト */
    "post-auth-register": {
      content: {
        "application/json": {
          /**
           * @description ユーザー名
           * @example テストユーザー
           */
          name: string;
          /**
           * Format: email
           * @description メールアドレス
           * @example test@example.com
           */
          email: string;
          /**
           * @description パスワード
           * @example password
           */
          password: string;
        };
      };
    };
    /** @description ログインリクエスト */
    "post-auth-login": {
      content: {
        "application/json": {
          /**
           * Format: email
           * @description メールアドレス
           * @example test@example.com
           */
          email: string;
          /**
           * @description パスワード
           * @example password
           */
          password: string;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * 会員情報取得
   * @description ユーザー(一般会員)の情報を取得する
   */
  "get-customer": {
    parameters: {
      path: {
        user: components["parameters"]["user-id"];
      };
    };
    responses: {
      200: components["responses"]["show-customer-200"];
      401: components["responses"]["unauthorized"];
      403: components["responses"]["forbidden"];
      404: components["responses"]["not-found"];
    };
  };
  /**
   * CSRFトークン取得
   * @description CSRFトークンを取得する
   */
  "get-sanctum-csrf-cookie": {
    responses: {
      204: components["responses"]["get-sanctum-csrf-cookie-204"];
    };
  };
  /**
   * 会員登録
   * @description ユーザー(一般会員)を新規登録する
   */
  "post-auth-register": {
    requestBody: components["requestBodies"]["post-auth-register"];
    responses: {
      201: components["responses"]["created"];
      204: components["responses"]["no-content"];
      422: components["responses"]["post-auth-register-422"];
    };
  };
  /**
   * ログイン
   * @description ユーザー(一般会員)のログイン処理を行う
   */
  "post-auth-login": {
    requestBody: components["requestBodies"]["post-auth-login"];
    responses: {
      200: components["responses"]["ok"];
      204: components["responses"]["no-content"];
      422: components["responses"]["post-auth-login-422"];
    };
  };
}
